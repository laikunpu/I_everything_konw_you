package tres.action;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import tres.entity.Book;
import tres.entity.BookDetailType;
import tres.entity.BookType;
import tres.entity.Chapter;
import tres.entity.Pagination;
import tres.entity.SearchItem;
import tres.inter.IService;

import com.opensymphony.xwork2.ActionSupport;

@SuppressWarnings("unchecked")
public class NovelAction extends ActionSupport {
	@Resource
	private IService service;

	private List<Book> books;//小说集合
	private List<Chapter> chapters;
	private Book book; //单本小说
	private Chapter chapter; //一段章节
	private String content;  //章节内容
	private Pagination page;
	private List<BookType> bookTypes; //小说类型集合
	private SearchItem searchItem; //搜索信息
	private String message; //无数据返回的信息

	public List<Book> getBooks() {
		return books;
	}

	public void setBooks(List<Book> books) {
		this.books = books;
	}

	public List<Chapter> getChapters() {
		return chapters;
	}

	public void setChapters(List<Chapter> chapters) {
		this.chapters = chapters;
	}

	public Book getBook() {
		return book;
	}

	public void setBook(Book book) {
		this.book = book;
	}

	public Chapter getChapter() {
		return chapter;
	}

	public void setChapter(Chapter chapter) {
		this.chapter = chapter;
	}

	public String getContent() {
		return content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	public Pagination getPage() {
		return page;
	}

	public void setPage(Pagination page) {
		this.page = page;
	}

	public List<BookType> getBookTypes() {
		return bookTypes;
	}

	public void setBookTypes(List<BookType> bookTypes) {
		this.bookTypes = bookTypes;
	}

	public SearchItem getSearchItem() {
		return searchItem;
	}

	public void setSearchItem(SearchItem searchItem) {
		this.searchItem = searchItem;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public String goIndex() {
		int currentPage = 0;
		int bookcount = service.getCount(Book.class, null, null);
		if (page != null) {
			currentPage = page.getCurrentPage();
		}
		books = service.getListByCondition(Book.class, "bookclicked", false,
				currentPage * 10, 10);
		// System.out.println("books.size():" + books.size());

		page = new Pagination(bookcount, currentPage, 10);
		System.out.println(page.toString());
		System.out.println("书的总数目:" + bookcount);
		bookTypes = service.findAllT(BookType.class);

		return "realIndex";
	}

	public String goChapter() {
		// System.out.println("book.bookname:" + book.getBookname());
		if (null != book && !"".equals(book.getBookname())) {
			Map<String, String> map = new HashMap<String, String>();
			map.put("novelname", book.getBookname());
			chapters = service.findByCondition(Chapter.class, map, 0, 0);
			map.clear();
			map.put("bookname", book.getBookname());
			book = (Book) service.findByCondition(Book.class, map, 0, 0).get(0);
			map = null;
			if (null != book) {
				book.setBookclicked(book.getBookclicked() + 1);
				service.updateT(book);
			}
			bookTypes = service.findAllT(BookType.class);
			return "chapter";
		}
		return "error";
	}

	public String goDetail() {
		// System.out.println("book.bookname:" + book.getBookname());
		if (null != book && !"".equals(book.getBookname())) {
			bookTypes = service.findAllT(BookType.class);
			return "detail";
		}
		return "error";
	}

	public String goContent() {

		Map<String, String> map = new HashMap<String, String>();
		map.put("novelname", chapter.getNovelname());
		map.put("chapternumber", String.valueOf(chapter.getChapternumber()));
		chapters = service.findByCondition(Chapter.class, map, 0, 0);
		map = null;
		if (chapters != null && chapters.size() > 0) {
			chapter = chapters.get(0);
			try {
				content = new String(chapter.getChaptercontent(), "UTF-8");
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			bookTypes = service.findAllT(BookType.class);
			return "content";
		} else {

		}
		// System.out.println(content);
		return "error";
	}

	public String goList() {
		int currentPage = 0;
		int bookcount = 0;

		Map<String, String> map = null;
		// 此判断是根据传过来的条件返回List,分页数据
		if (book != null && !"".equals(book.getBooktype())) {
			bookcount = service.getCount(Book.class, "booktype",
					book.getBooktype());
			map = new HashMap<String, String>();
			map.put("booktype", book.getBooktype());
			message = book.getBooktype() + "分类下暂无小说！！！";
		} else if (searchItem != null) {
			bookcount = service.getCount(Book.class, searchItem.getItem(),
					searchItem.getKeyword());
			map = new HashMap<String, String>();
			map.put(searchItem.getItem(), searchItem.getKeyword());
			message = searchItem.getKeyword() + "   查询结果为空！！！";

		} else {
			bookcount = service.getCount(Book.class, null, null);
			message = "书库暂无小说！！！";
		}
		books = service.findByCondition(Book.class, map, currentPage * 50, 50);
		if (books.size() > 0) {
			message = null;
		}
		map = null;

		bookTypes = service.findAllT(BookType.class);// 为top.jsp返回书的类型
		if (page != null) {
			currentPage = page.getCurrentPage();
		}
		page = new Pagination(bookcount, currentPage, 50);
		return "list";
	}

}
